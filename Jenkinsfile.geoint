node ('sl61'){
  // ---------------------------------------------
  // we want a clean workspace     
  stage ('Clear workspace'){         
  deleteDir()
  }
  
  // ---------------------------------------------
  // checkout code     
  stage ('Checkout'){
  checkout scm
  }
  
  // ---------------------------------------------
  // build using maven     
  stage ('Build'){         
  def mvnHome = "${tool name: 'M3'}"         
  echo "MVN_HOME: ${mvnHome}"
  
  withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: '4d7ce3c3-2cba-4031-9ef0-df4a1926bbe5', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME']]) {
      
  // set up local settings.xml for maven build
  sh '''set +x
cat <<-EOF> /jslave/workspace/DigitalGlobe/MrGeo/mrgeo-pipeline/maven-settings.xml
<?xml version="1.0" encoding="UTF-8"?>
<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
<pluginGroups></pluginGroups>
<proxies></proxies>
<servers xmlns="http://maven.apache.org/SETTINGS/1.1.0">
    <server>
    <id>mrgeo-repository</id>
    <username>${USERNAME}</username>
    <password>${PASSWORD}</password>
  </server>
</servers>
<mirrors></mirrors>
<profiles></profiles>
 </settings>
EOF'''

  //env. properties file
  sh '''#!/bin/bash
  source /etc/profile
  source ~/.bashrc

  BUILD_VERSION=emr471
  echo "BUILD_VERSION: ${BUILD_VERSION}"

  # Set the existing version of the build
  VERSION=`scripts/mvn-build --quiet help:evaluate -Dexpression=project.version ${BUILD_VERSION} | grep -v \'\\[\' | tail -1`
  echo "VERSION" ${VERSION}

  # Set the build type
  BUILD=`scripts/mvn-build --quiet help:evaluate -Dexpression=final.classifier ${BUILD_VERSION} | grep -v \'\\[\' | tail -1`
  echo "BUILD" ${BUILD}

  # Check for SNAPSHOT, and add the BUILD as part of the version name
  if [[ ${VERSION} == *"-SNAPSHOT" ]]; then
    NEWVERSION=${VERSION%"-SNAPSHOT"}-${BUILD-SNAPSHOT}
    DEPLOY_REPO_URL="deploy.repository.url=https://nexus.devops.geointservices.io/content/repositories/DG-Releases"
  else
    NEWVERSION=${VERSION}-${BUILD}
    DEPLOY_REPO_URL="deploy.repository.url=https://nexus.devops.geointservices.io/content/repositories/DG-Releases"
  fi
  echo "NEWVERSION" ${NEWVERSION}
  echo "DEPLOY_REPO_URL"=${DEPLOY_REPO_URL}

  # set mvn version, build, revert mvn version
  ${mvnHome}/bin/mvn -Dmodules=all versions:set -DnewVersion=${NEWVERSION}
  ${mvnHome}/bin/mvn -e -s /jslave/workspace/DigitalGlobe/MrGeo/mrgeo-pipeline/maven-settings.xml -P${BUILD_VERSION} -Pskip-all-tests  -Dmodules=all deploy -U -D${DEPLOY_REPO_URL}
  ${mvnHome}/bin/mvn versions:revert'''
 
}
}

  // ---------------------------------------------
  //archive artifacts     
  stage ('Archive'){        
  archive '**/distribution-tgz/target/*tar.gz'
  }
  
  // ---------------------------------------------
  //generate rpm
  stage ('Package MrGeo'){
  //sh '''gem install bundler;
 // echo "source 'https://rubygems.org'" > Gemfile
 // echo "gem 'fpm'" >> Gemfile
 // bundle install --path=vendor/bundle;
 // bundle exec which fpm;
 // bundle exec fpm --version;'''

  sh '''ROOT_WORKSPACE=/jslave/workspace/DigitalGlobe/MrGeo
  PARENT_TARGET_DIR=${ROOT_WORKSPACE}/mrgeo-pipeline/distribution/target
  MRGEO_TAR=$(find ${PARENT_TARGET_DIR} -name "mrgeo-*.tar.gz")
  
  mkdir -p ${PARENT_TARGET_DIR}/rpm-creation

  cp ${MRGEO_TAR} ${PARENT_TARGET_DIR}/rpm-creation/
  cd ${PARENT_TARGET_DIR}/rpm-creation

  TARBALL_FILENAME=mrgeo-*.tar.gz
  NEWVERSION=$(echo ${TARBALL_FILENAME})
  TRIMMED_VERSION=${NEWVERSION::-7}

  tar -xvf mrgeo-*.tar.gz
  rm -f mrgeo-*.tar.gz

  #move jar files into jar folder for easier installation
  mkdir jar
  mv *.jar jar/

  echo \'#!/bin/bash\' >> set_mrgeo_env.sh
  echo \'\' >> set_mrgeo_env.sh
  echo \'sudo sh -c "echo export MRGEO_COMMON_HOME=/usr/lib/mrgeo" >> /etc/profile.d/mrgeo.sh\' >> set_mrgeo_env.sh
  echo \'sudo sh -c "echo export MRGEO_CONF_DIR=/etc/mrgeo/conf" >> /etc/profile.d/mrgeo.sh\' >> set_mrgeo_env.sh
  echo \'sudo ln -sf /usr/lib/mrgeo/bin/mrgeo /usr/bin/mrgeo\' >> set_mrgeo_env.sh
  echo \'\' >> set_mrgeo_env.sh
  echo \'\' >> set_mrgeo_env.sh
  echo \'echo "********************** FINISHED MRGEO INSTALLATION *********************"\' >> set_mrgeo_env.sh
  echo \'echo "MrGeo has been installed! Please execute one of these options for MrGeo:"\' >> set_mrgeo_env.sh
  echo \'echo "  1) Restart your shell to activate environment variables OR"\' >> set_mrgeo_env.sh
  echo \'echo "  2) Execute line: source /etc/profile.d/mrgeo.sh"\' >> set_mrgeo_env.sh
  echo \'echo "******************************* ENJOY! *********************************"\' >> set_mrgeo_env.sh
  echo \'\' >> set_mrgeo_env.sh
  chmod +x set_mrgeo_env.sh

  sudo bundle exec fpm -s dir -t rpm -n ${TRIMMED_VERSION}.rpm -p ${TRIMMED_VERSION}.rpm --after-install ./set_mrgeo_env.sh \\
  bin/=/usr/lib/mrgeo/bin/ lib/=/usr/lib/mrgeo/lib/ conf/=/etc/mrgeo/conf/ \\
  color-scales/=/usr/lib/mrgeo/color-scales/ jar/=/usr/lib/mrgeo/
  
  mv ${TRIMMED_VERSION}.rpm ${PARENT_TARGET_DIR}/'''
  }
  
  // ---------------------------------------------
  //generate pymrgeo rpm
  stage ('Package pyMrGeo'){
  sh '''#!/bin/bash

  # Set directory var
  ROOT_WORKSPACE=/jslave/workspace/DigitalGlobe/MrGeo
  MRGEO_DIR=${ROOT_WORKSPACE}/mrgeo-pipeline
  PYPI_DIR=${MRGEO_DIR}/mrgeo-python/src/main/python
  PARENT_TARGET_DIR=${ROOT_WORKSPACE}/mrgeo-pipeline/distribution/target
  
  PY_VERSION=0.0.7

  cd ${PYPI_DIR}/

  #clean up existing rpms
  rm -f *.rpm

  # Generate RPM for pymrgeo
  sudo bundle exec fpm -s dir -t rpm -n pymrgeo-${PY_VERSION}.rpm -p pymrgeo-${PY_VERSION}.rpm --prefix /usr/lib/python2.7/dist-packages --directories ./pymrgeo ./pymrgeo
  
  mv ${PYPI_DIR}/pymrgeo-${PY_VERSION}.rpm ${PARENT_TARGET_DIR}/'''
  }
  
  // ---------------------------------------------
  // sonar
  stage ('Sonar'){
  def sonarUrl = "https://sonar.geointservices.io"         
  def projectKey = "mrgeo:mrgeo"         
  def projectName = "mrgeo:mrgeo"         
  withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: '4d7ce3c3-2cba-4031-9ef0-df4a1926bbe5', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME']]) {
      sh "${mvnHome}/bin/mvn clean verify sonar:sonar -Dsonar.host.url=${sonarUrl} -Dsonar.projectKey=${projectKey} -Dsonar.projectName=${projectName} -Dsonar.login=${env.USERNAME} -Dsonar.password=${env.PASSWORD}"
      }
  }
  
  // ---------------------------------------------
  // fortify
  stage ('Fortify MrGeo'){
  def fortifyJavaName = "mrgeo-java"
  sh "/opt/hp_fortify_sca/bin/sourceanalyzer -64 -b ${env.JOB_NAME} -clean"
  sh "/opt/hp_fortify_sca/bin/sourceanalyzer -64 -b ${env.JOB_NAME}       -Xmx3000M `find ./ -name '*.java'`"          
  sh "/opt/hp_fortify_sca/bin/sourceanalyzer -b ${env.JOB_NAME} -scan -Xmx4G -64 -f fortifyResults-${fortifyJavaName}.fpr"
  withCredentials([[$class : 'StringBinding', credentialsId   : '2fa66d37-7265-4bf5-aa8a-696f032078e0', variable: 'API_KEY']]) {
    sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@fortifyResults-${fortifyJavaName}.fpr https://threadfix.devops.geointservices.io/rest/applications/14/upload?apiKey={$API_KEY}"
    }
  }
  
  // ---------------------------------------------  
  // fortify
  stage ('Fortify pyMrGeo'){
  def fortifyPythonName = "pymrgeo-python"
  sh "/opt/hp_fortify_sca/bin/sourceanalyzer -b ${env.JOB_NAME} `find ./ -name '*.py'`"
  sh "/opt/hp_fortify_sca/bin/sourceanalyzer -b ${env.JOB_NAME} -scan -Xmx4G -64 -f fortifyResults-${fortifyPythonName}.fpr"
  withCredentials([[$class : 'StringBinding', credentialsId   : '2fa66d37-7265-4bf5-aa8a-696f032078e0', variable: 'API_KEY']]) {
    sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@fortifyResults-${fortifyPythonName}.fpr https://threadfix.devops.geointservices.io/rest/applications/14/upload?apiKey={$API_KEY}"
    }
  }
  
  // ---------------------------------------------
  //owasp
  stage ('OWASP'){
  sh "/opt/dependency-check/bin/dependency-check.sh --project '${env.JOB_NAME}' --scan '.' --format 'XML' -disableBundleAudit --enableExperimental"
  withCredentials([[$class : 'StringBinding', credentialsId   : '2fa66d37-7265-4bf5-aa8a-696f032078e0', variable: 'API_KEY']]) {
    sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@dependency-check-report.xml https://threadfix.devops.geointservices.io/rest/applications/14/upload?apiKey={$API_KEY}"
    }
  }
  
  // ---------------------------------------------
  // publish to nexus
  stage ('Publish'){
  withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: '4d7ce3c3-2cba-4031-9ef0-df4a1926bbe5', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME']]) {
  
  sh '''set +x
  ROOT_WORKSPACE=/jslave/workspace/DigitalGlobe/MrGeo
  PARENT_TARGET_DIR=${ROOT_WORKSPACE}/mrgeo-pipeline/distribution/target
  
  MRGEO_RPM=$(find ${PARENT_TARGET_DIR} -name "mrgeo*.rpm")
  MRGEO_TAR=$(find ${PARENT_TARGET_DIR} -name "mrgeo*.tar.gz")
  PYMRGEO_RPM=$(find ${PARENT_TARGET_DIR} -name "pymrgeo*.rpm")
  
  curl -v -u ${USERNAME}:${PASSWORD} --upload-file ${MRGEO_RPM} https://nexus.devops.geointservices.io/content/repositories/DG-Releases/org/mrgeo/
  curl -v -u ${USERNAME}:${PASSWORD} --upload-file ${MRGEO_TAR} https://nexus.devops.geointservices.io/content/repositories/DG-Releases/org/mrgeo/
  curl -v -u ${USERNAME}:${PASSWORD} --upload-file ${PYMRGEO_RPM} https://nexus.devops.geointservices.io/content/repositories/DG-Releases/org/mrgeo/'''
  }
  }
}
